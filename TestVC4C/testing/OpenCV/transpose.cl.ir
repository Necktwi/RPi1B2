; ModuleID = 'transpose.cl'
target datalayout = "e-p:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir-unknown-unknown"

%spirv.ConstantSampler = type { i32, i32, i32 }
%spirv.Sampler = type opaque

@.sampler.init = internal addrspace(2) constant %spirv.ConstantSampler zeroinitializer
@DEFAULT_SAMPLER = constant %spirv.Sampler addrspace(2)* bitcast (%spirv.ConstantSampler addrspace(2)* @.sampler.init to %spirv.Sampler addrspace(2)*), align 4
@transpose.tile = internal unnamed_addr addrspace(3) global [2 x i32] undef, align 4

; Function Attrs: nounwind
define spir_kernel void @transpose(i8 addrspace(1)* nocapture readonly %srcptr, i32 %src_step, i32 %src_offset, i32 %src_rows, i32 %src_cols, i8 addrspace(1)* nocapture %dstptr, i32 %dst_step, i32 %dst_offset) #0 {
  %1 = tail call spir_func i32 @_vc4cl_group_ids() #3
  %2 = and i32 %1, 255
  %3 = tail call spir_func i32 @_vc4cl_group_ids() #3
  %4 = lshr i32 %3, 8
  %5 = and i32 %4, 255
  %6 = tail call spir_func i32 @_Z14get_num_groupsj(i32 0) #4
  %7 = tail call spir_func i32 @_Z14get_num_groupsj(i32 1) #4
  %8 = icmp eq i32 %src_rows, %src_cols
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %0
  %10 = add nuw nsw i32 %5, %2
  br label %17

; <label>:11                                      ; preds = %0
  %12 = tail call spir_func i32 @_Z12_vc4cl_mul24ii(i32 %6, i32 %5) #3
  %13 = add nsw i32 %12, %2
  %14 = srem i32 %13, %7
  %15 = sdiv i32 %13, %7
  %16 = add nsw i32 %15, %14
  br label %17

; <label>:17                                      ; preds = %11, %9
  %groupId_y.0 = phi i32 [ %2, %9 ], [ %14, %11 ]
  %.pn = phi i32 [ %10, %9 ], [ %16, %11 ]
  %groupId_x.0 = srem i32 %.pn, %6
  %18 = tail call spir_func i32 @_vc4cl_local_ids() #3
  %19 = and i32 %18, 255
  %20 = tail call spir_func i32 @_vc4cl_local_ids() #3
  %21 = lshr i32 %20, 8
  %22 = and i32 %21, 255
  %23 = tail call spir_func i32 @_Z12_vc4cl_mul24ii(i32 %groupId_x.0, i32 1) #3
  %24 = add nsw i32 %23, %19
  %25 = tail call spir_func i32 @_Z12_vc4cl_mul24ii(i32 %groupId_y.0, i32 1) #3
  %26 = add nsw i32 %25, %22
  %27 = tail call spir_func i32 @_Z12_vc4cl_mul24ii(i32 %groupId_y.0, i32 1) #3
  %28 = add nsw i32 %27, %19
  %29 = tail call spir_func i32 @_Z12_vc4cl_mul24ii(i32 %groupId_x.0, i32 1) #3
  %30 = add nsw i32 %29, %22
  %31 = icmp slt i32 %24, %src_cols
  %32 = icmp slt i32 %26, %src_rows
  %or.cond = and i1 %31, %32
  br i1 %or.cond, label %.loopexit39, label %44

.loopexit39:                                      ; preds = %17
  %33 = tail call spir_func i32 @_Z12_vc4cl_mul24ii(i32 %24, i32 4) #3
  %34 = tail call spir_func i32 @_Z12_vc4cl_mul24ii(i32 %26, i32 %src_step) #3
  %35 = add nsw i32 %33, %src_offset
  %36 = add nsw i32 %35, %34
  %37 = getelementptr inbounds i8 addrspace(1)* %srcptr, i32 %36
  %38 = bitcast i8 addrspace(1)* %37 to i32 addrspace(1)*
  %39 = load i32 addrspace(1)* %38, align 4, !tbaa !10
  %40 = tail call spir_func i32 @_Z12_vc4cl_mul24ii(i32 %22, i32 2) #3
  %41 = add nsw i32 %40, %19
  %42 = getelementptr inbounds [2 x i32] addrspace(3)* @transpose.tile, i32 0, i32 %41
  store i32 %39, i32 addrspace(3)* %42, align 4, !tbaa !10
  %43 = tail call spir_func i32 @_Z12_vc4cl_mul24ii(i32 4, i32 %src_step) #3
  br label %44

; <label>:44                                      ; preds = %.loopexit39, %17
  %45 = tail call spir_func i32 @_vc4cl_local_sizes() #3
  %46 = and i32 %45, 255
  %47 = tail call spir_func i32 @_vc4cl_local_sizes() #3
  %48 = lshr i32 %47, 8
  %49 = and i32 %48, 255
  %50 = mul nuw nsw i32 %49, %46
  %51 = tail call spir_func i32 @_vc4cl_local_sizes() #3
  %52 = lshr i32 %51, 16
  %53 = and i32 %52, 255
  %54 = mul nuw nsw i32 %50, %53
  %55 = tail call spir_func i32 @_vc4cl_local_ids() #3
  %56 = lshr i32 %55, 16
  %57 = and i32 %56, 255
  %58 = mul nuw nsw i32 %57, %49
  %59 = tail call spir_func i32 @_vc4cl_local_ids() #3
  %60 = lshr i32 %59, 8
  %61 = and i32 %60, 255
  %62 = add nuw nsw i32 %58, %61
  %63 = mul nuw nsw i32 %62, %46
  %64 = tail call spir_func i32 @_vc4cl_local_ids() #3
  %65 = add nuw nsw i32 %63, %64
  %66 = icmp eq i32 %54, 0
  br i1 %66, label %_Z7barrierj.exit, label %.lr.ph5.i.preheader

.lr.ph5.i.preheader:                              ; preds = %44
  br label %.lr.ph5.i

.lr.ph.i:                                         ; preds = %.lr.ph5.i
  %67 = trunc i32 %65 to i8
  br label %70

.lr.ph5.i:                                        ; preds = %.lr.ph5.i.preheader, %.lr.ph5.i
  %i.03.i = phi i32 [ %69, %.lr.ph5.i ], [ 0, %.lr.ph5.i.preheader ]
  %68 = trunc i32 %i.03.i to i8
  tail call spir_func void @_vc4cl_semaphore_increment(i8 zeroext %68) #3
  %69 = add nuw nsw i32 %i.03.i, 1
  %exitcond6.i = icmp eq i32 %69, %54
  br i1 %exitcond6.i, label %.lr.ph.i, label %.lr.ph5.i

; <label>:70                                      ; preds = %70, %.lr.ph.i
  %i1.02.i = phi i32 [ 0, %.lr.ph.i ], [ %71, %70 ]
  tail call spir_func void @_vc4cl_semaphore_decrement(i8 zeroext %67) #3
  %71 = add nuw nsw i32 %i1.02.i, 1
  %exitcond.i = icmp eq i32 %71, %54
  br i1 %exitcond.i, label %_Z7barrierj.exit.loopexit, label %70

_Z7barrierj.exit.loopexit:                        ; preds = %70
  br label %_Z7barrierj.exit

_Z7barrierj.exit:                                 ; preds = %_Z7barrierj.exit.loopexit, %44
  %72 = icmp slt i32 %28, %src_rows
  %73 = icmp slt i32 %30, %src_cols
  %or.cond2 = and i1 %72, %73
  br i1 %or.cond2, label %.loopexit8, label %85

.loopexit8:                                       ; preds = %_Z7barrierj.exit
  %74 = tail call spir_func i32 @_Z12_vc4cl_mul24ii(i32 %28, i32 4) #3
  %75 = tail call spir_func i32 @_Z12_vc4cl_mul24ii(i32 %30, i32 %dst_step) #3
  %76 = add nsw i32 %74, %dst_offset
  %77 = add nsw i32 %76, %75
  %78 = tail call spir_func i32 @_Z12_vc4cl_mul24ii(i32 %19, i32 2) #3
  %79 = add nsw i32 %22, %78
  %80 = getelementptr inbounds [2 x i32] addrspace(3)* @transpose.tile, i32 0, i32 %79
  %81 = load i32 addrspace(3)* %80, align 4, !tbaa !10
  %82 = getelementptr inbounds i8 addrspace(1)* %dstptr, i32 %77
  %83 = bitcast i8 addrspace(1)* %82 to i32 addrspace(1)*
  store i32 %81, i32 addrspace(1)* %83, align 4, !tbaa !10
  %84 = tail call spir_func i32 @_Z12_vc4cl_mul24ii(i32 4, i32 %dst_step) #3
  br label %85

; <label>:85                                      ; preds = %.loopexit8, %_Z7barrierj.exit
  ret void
}

; Function Attrs: nounwind readnone
declare spir_func i32 @_Z14get_num_groupsj(i32) #1

declare spir_func void @_vc4cl_semaphore_increment(i8 zeroext) #2

declare spir_func void @_vc4cl_semaphore_decrement(i8 zeroext) #2

declare spir_func i32 @_vc4cl_local_sizes() #2

declare spir_func i32 @_vc4cl_local_ids() #2

declare spir_func i32 @_Z12_vc4cl_mul24ii(i32, i32) #2

declare spir_func i32 @_vc4cl_group_ids() #2

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { alwaysinline nounwind }
attributes #4 = { nounwind readnone }

!opencl.kernels = !{!0}
!opencl.enable.FP_CONTRACT = !{}
!opencl.spir.version = !{!7}
!opencl.ocl.version = !{!7}
!opencl.used.extensions = !{!8}
!opencl.used.optional.core.features = !{!8}
!opencl.compiler.options = !{!8}
!llvm.ident = !{!9}

!0 = !{void (i8 addrspace(1)*, i32, i32, i32, i32, i8 addrspace(1)*, i32, i32)* @transpose, !1, !2, !3, !4, !5, !6}
!1 = !{!"kernel_arg_addr_space", i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0}
!2 = !{!"kernel_arg_access_qual", !"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none"}
!3 = !{!"kernel_arg_type", !"uchar*", !"int", !"int", !"int", !"int", !"uchar*", !"int", !"int"}
!4 = !{!"kernel_arg_base_type", !"uchar*", !"int", !"int", !"int", !"int", !"uchar*", !"int", !"int"}
!5 = !{!"kernel_arg_type_qual", !"const", !"", !"", !"", !"", !"", !"", !""}
!6 = !{!"kernel_arg_name", !"srcptr", !"src_step", !"src_offset", !"src_rows", !"src_cols", !"dstptr", !"dst_step", !"dst_offset"}
!7 = !{i32 1, i32 2}
!8 = !{}
!9 = !{!"clang version 3.6.1 (https://github.com/KhronosGroup/SPIR d7e44c3b27581e54ca0e522987d1ade2bd29b70d) (https://github.com/KhronosGroup/SPIRV-LLVM.git fffc52b7fb3552c045c398d68e22216c8d770c00)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"int", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C/C++ TBAA"}
